---
# tasks file for brewmaster-backend

- block:
  - name: install dependencies
    become: true
    package:
      name: "{{ item }}"
      state: present
    loop: "{{ dependencies }}"
    tags: install

  - name: establish pip packages
    become: true
    pip:
      executable: pip3
      name: pipenv
    tags: install

- name: GIT | clone backend repository
  git:
    repo: "{{ backend_repo['url'] }}"
    force: true
    version: "{{ backend_repo['version'] | default(omit) }}"
    dest: "{{ backend_repo['dest'] }}"
  register: git_repo
  tags: install

- name: copy .env.example to .env file
  when: git_repo.changed
  command: "cp .env.example .env"
  args:
    chdir: "{{ backend_repo['dest'] }}"
  tags: install

- name: configure environment variables
  lineinfile:
    regex: "{{ item.key }}"
    line: "{{ item.key }}={{ item.value }}"
    path: "{{ backend_repo['dest'] }}/.env"
  with_dict: "{{ backend_environments }}"
  tags: install

- name: retrieve python version from Pipfile
  shell: >
    grep python_version Pipfile | cut -d'"' -f2
  args:
    chdir: "{{ backend_repo['dest'] }}"
  changed_when: false
  register: python_version
  tags: install

- set_fact:
    python_version: "{{ python_version.stdout }}"

- debug:
    msg: "{{ python_version }}"

- name: PIPENV | generate requirements.txt file
  shell: >
    pipenv lock --requirements | cut -d';' -f1 | tail -n+2 > {{ ansible_env['HOME'] }}/backend_requires.txt
  args:
    chdir: "{{ backend_repo['dest'] }}"
  changed_when: false
  tags: install

- name: install backend application requirements
  pip:
    requirements: "{{ ansible_env['HOME'] }}/backend_requires.txt"
    virtualenv: "{{ ansible_env['HOME'] }}/backend_venv"
    virtualenv_python: "{{ python_version }}"
    editable: "{{ backend_develop }}"
    chdir: "{{ backend_repo['dest'] }}"
  register: backend_python

- name: SYSTEMD | flask server repo absolute path
  command: "pwd"
  args:
    chdir: "{{ backend_repo['dest'] }}"
  register: repo_absolute_path
  changed_when: false

- name: SYSTEMD | copy unit file
  become: true
  template:
    src: "flask_unit_file.service.j2"
    dest: "/etc/systemd/system/{{ backend_service['name'] }}.service"
  register: unit_file
  notify:  SYSTEMD | backend restart
  tags: configure

- name: SYSTEMD | reload daemon
  become: true
  when: unit_file.changed
  systemd:
    daemon_reload: true
  tags: configure

- name: SYSTEMD | ensure backend is started and enabled
  become: true
  systemd:
    name: "{{ backend_service['name'] }}"
    state: started
    enabled: true
  tags: configure
