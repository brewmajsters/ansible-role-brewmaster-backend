---
# tasks file for brewmaster-backend

- block:
  - name: install dependencies
    become: true
    package:
      name: "{{ item }}"
      state: present
    loop: "{{ dependencies }}"
    tags: install

  - name: establish pip packages
    become: true
    pip:
      executable: pip3
      name: pipenv
    tags: install

- name: GIT | clone backend repository
  git:
    repo: "{{ repo['url'] }}"
    force: true
    version: "{{ repo['version'] | default(omit) }}"
    dest: "{{ repo['dest'] }}"
  register: git_repo
  tags: install

- name: copy .env.example to .env file
  when: git_repo.changed
  command: "cp .env.example .env"
  args:
    chdir: "{{ repo['dest'] }}"
  tags: install

- name: configure environment variables
  lineinfile:
    regex: "{{ item.env }}"
    line: "{{ item.env }}={{ item.val }}"
    path: "{{ repo['dest'] }}/.env"
  loop:
    - env: DATABASE_PASSWORD
      val: "{{ timescaledb.root_password }}"
    - env: DATABASE_USER
      val: "{{ timescaledb.database_owner }}"
    - env: DATABASE_NAME
      val: "{{ timescaledb.database_name }}"
  tags: install

- name: PIPENV | install backend application
  become: true
  command: "pipenv install {{ develop | ternary('', '--deploy --system') }}"
  args:
    chdir: "{{ repo['dest'] }}"
  changed_when: false
  tags: install

- name: PIPENV | get the python_venv
  when: develop
  command: "pipenv --py"
  args:
    chdir: "{{ repo['dest'] }}"
  changed_when: false
  register: venv_python_executable
  tags: install

- name: PIPENV | get the proejct python version
  shell: >
    grep python_version Pipfile | awk '{print $3}' | tr -d '"'
  args:
    chdir: "{{ repo['dest'] }}"
  changed_when: false
  register: venv_python_version
  tags: install

- name: SYSTEMD | flask server repo absolute path
  command: "pwd"
  args:
    chdir: "{{ repo['dest'] }}"
  register: repo_absolute_path
  changed_when: false

- name: SYSTEMD | copy unit file
  become: true
  template:
    src: "flask_unit_file.service.j2"
    dest: "/etc/systemd/system/{{ backend_service['name'] }}.service"
  register: unit_file
  notify:  SYSTEMD | backend restart
  tags: configure

- name: SYSTEMD | start backend
  become: true
  when: unit_file.changed
  systemd:
    daemon_reload: true
    name: "{{ backend_service['name'] }}"
    state: started
    enabled: true
  tags: configure
